{"version":3,"sources":["index.js"],"names":["viz","sheet","workbook","table","cases","deaths","containerDiv","document","getElementById","options","hideTabs","hideToolbar","onFirstInteractive","getWorkbook","getActiveSheet","getWorksheets","get","maxRows","ignoreAliases","ignoreSelection","includeAllColumns","getUnderlyingDataAsync","then","t","getData","value","length","undefined","d","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","querySelector","innerHTML","tableau","Viz","fetch","resp","json","token","data","features","attributes","Confirmed","Deaths","Last_Update","className","window"],"mappings":";;;AAAA,aACA,QAAA,gBACA,WACQA,IAAAA,EAAKC,EAAOC,EAAUC,EAAOC,EAAOC,EAEpCC,EAAeC,SAASC,eAAe,gBAE3CC,EAAU,CACNC,UAAU,EACVC,aAAa,EACbC,mBAAoB,WA0BpBV,EAAWF,EAAIa,cACfZ,EAAQC,EAASY,iBAAiBC,gBAAgBC,IAAI,kBAGtDP,EAAU,CACNQ,QAAS,EACTC,eAAe,EACfC,iBAAiB,EACjBC,mBAAmB,GAGxBnB,EAAMoB,uBAAuBZ,GAASa,KAAK,SAASC,GAEvB,aADxBpB,EAAQoB,EAAEC,WACD,GAAG,GAAGC,QACXrB,EAAQD,EAAMuB,QAELC,MAAVtB,IACCJ,EAAQC,EAASY,iBAAiBC,gBAAgBC,IAAI,mBAChDK,uBAAuBZ,GAASa,KAAK,SAASM,GAExB,aADxBzB,EAAQyB,EAAEJ,WACD,GAAG,GAAGC,QACXpB,EAASF,EAAMuB,QAEfG,IAAAA,EAAQ,IAAIC,KACZC,EAAKC,OAAOH,EAAMI,WAAWC,SAAS,EAAG,KACzCC,EAAKH,OAAOH,EAAMO,WAAa,GAAGF,SAAS,EAAG,KAC9CG,EAAOR,EAAMS,cACjBT,EAAWM,GAAAA,OAAAA,EAAMJ,KAAAA,OAAAA,EAAMM,KAAAA,OAAAA,GACvB9B,SAASgC,cAAc,iCAAiCC,UAAYpC,EACpEG,SAASgC,cAAc,+BAA+BC,UAAYnC,EAClEE,SAASgC,cAAc,qBAAqBC,UAA4BX,gBAAAA,OAAAA,SApDxF7B,EAAM,IAAIyC,QAAQC,IAAIpC,EARhB,oMAQmCG,GAEzCkC,MAAM,+DACLrB,KAAK,SAACsB,GAASA,OAAAA,EAAKC,SACpBvB,KAAK,SAASwB,GAEXH,MADA,y5BAECrB,KAAK,SAACsB,GAASA,OAAAA,EAAKC,SACpBvB,KAAK,SAASyB,GACXxC,SAASgC,cAAc,kCAAkCC,UAAYO,EAAKC,SAAS,GAAGC,WAAWC,UACjG3C,SAASgC,cAAc,gCAAgCC,UAAYO,EAAKC,SAAS,GAAGC,WAAWE,OAC3FtB,IAAAA,EAAQ,IAAIC,KAAKiB,EAAKC,SAAS,GAAGC,WAAWG,aAC7CrB,EAAKC,OAAOH,EAAMI,WAAWC,SAAS,EAAG,KACzCC,EAAKH,OAAOH,EAAMO,WAAa,GAAGF,SAAS,EAAG,KAC9CG,EAAOR,EAAMS,cACjBT,EAAWM,GAAAA,OAAAA,EAAMJ,KAAAA,OAAAA,EAAMM,KAAAA,OAAAA,GACvB9B,SAASgC,cAAc,sBAAsBC,UAA4BX,gBAAAA,OAAAA,EAAzE,KACAtB,SAASgC,cAAc,mBAAmBc,UAAY,OA7BlE,CAqEGC","file":"index.js","sourceRoot":"../src","sourcesContent":["'use strict';\nimport './index.scss';\n(function(){\n    var viz, sheet, workbook, table, cases, deaths; \n\n    var containerDiv = document.getElementById(\"vizContainer\"),\n    url = \"https://codtableau.detroitmi.gov/t/DHD/views/PublicCOVIDTableau/DetriotCountsOnly?iframeSizedToWindow=true&:embed=y&:showAppBanner=false&:display_count=no&:showVizHome=no&:origin=viz_share_link\",\n    options = {\n        hideTabs: true,\n        hideToolbar: true,\n        onFirstInteractive: function() {\n            getUnderlyingData();\n        }\n    };\n    viz = new tableau.Viz(containerDiv, url, options);\n\n    fetch('https://us-central1-detroit-iet.cloudfunctions.net/getToken')\n    .then((resp) => resp.json()) // Transform the data into json\n    .then(function(token) {\n        let url = `https://services1.arcgis.com/0MSEUqKaxRlEPj5g/ArcGIS/rest/services/Coronavirus_2019_nCoV_Cases/FeatureServer/1/query?where=Country_Region+%3D%27US%27+AND+Province_State+%3D+%27Michigan%27&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=*&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=json&token=`;\n        fetch(url)\n        .then((resp) => resp.json()) // Transform the data into json\n        .then(function(data) {\n            document.querySelector('.data-block.detected.mich span').innerHTML = data.features[0].attributes.Confirmed;\n            document.querySelector('.data-block.deaths.mich span').innerHTML = data.features[0].attributes.Deaths;\n            let today = new Date(data.features[0].attributes.Last_Update);\n            let dd = String(today.getDate()).padStart(2, '0');\n            let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n            let yyyy = today.getFullYear();\n            today = `${mm}/${dd}/${yyyy}`;\n            document.querySelector('.update-date .mich').innerHTML = `Last updated ${today} `;\n            document.querySelector('#loader-overlay').className = '';\n        });\n    });    \n\n    function getUnderlyingData() {\n        workbook = viz.getWorkbook();\n        sheet = workbook.getActiveSheet().getWorksheets().get(\"Patient Status\");\n        // If the active sheet is not a dashboard, then you can just enter:\n        // viz.getWorkbook().getActiveSheet();\n        options = {\n            maxRows: 0, // Max rows to return. Use 0 to return all rows\n            ignoreAliases: false,\n            ignoreSelection: true,\n            includeAllColumns: false\n        };\n\n       sheet.getUnderlyingDataAsync(options).then(function(t) {\n            table = t.getData();\n            if(table[0][2].value != \"Deceased\"){\n                cases = table.length;\n            }\n            if(deaths == undefined){\n                sheet = workbook.getActiveSheet().getWorksheets().get(\"Patient Deaths\");\n                sheet.getUnderlyingDataAsync(options).then(function(d) {\n                    table = d.getData();\n                    if(table[0][2].value == \"Deceased\"){\n                        deaths = table.length;\n                    }\n                    let today = new Date();\n                    let dd = String(today.getDate()).padStart(2, '0');\n                    let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n                    let yyyy = today.getFullYear();\n                    today = `${mm}/${dd}/${yyyy}`;\n                    document.querySelector('.data-block.detected.det span').innerHTML = cases;\n                    document.querySelector('.data-block.deaths.det span').innerHTML = deaths;\n                    document.querySelector('.update-date .det').innerHTML = `Last updated ${today}`;\n                });\n            }\n        });\n    }\n})(window);"]}