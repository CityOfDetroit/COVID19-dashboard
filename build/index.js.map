{"version":3,"sources":["index.js"],"names":["window","fetch","then","resp","json","token","url","access_token","data","detected","quarantined","recovered","features","length","forEach","element","attributes","Quarantine","Recovery","Death","document","querySelector","innerHTML","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","time","getHours","getMinutes","getSeconds","className"],"mappings":";;;AAAA,aACA,QAAA,gBAkDGA,OAhDCC,MAAM,+DACLC,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASG,GACPC,IAAAA,EAA62BD,u2BAAAA,OAAAA,EAAME,cACv3BN,MAAMK,GACLJ,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASM,GACPC,IAAAA,EAAW,EACXC,EAAc,EACdC,EAAY,EAEbH,EAAKI,SAASC,QACbL,EAAKI,SAASE,QAAQ,SAAAC,GACV,QAAA,GACCA,IAAiC,KAAjCA,EAAQC,WAAWC,WACpBR,IACAC,IACA,MAECK,IAA+B,KAA/BA,EAAQC,WAAWE,SAKfH,IAA4B,KAA5BA,EAAQC,WAAWG,MACxBV,IACAE,OAQhBS,SAASC,cAAc,6BAA6BC,UAAYb,EAChEW,SAASC,cAAc,gCAAgCC,UAAYZ,EACnEU,SAASC,cAAc,8BAA8BC,UAAYX,EACjES,SAASC,cAAc,2BAA2BC,UA3BrC,EA4BTC,IAAAA,EAAQ,IAAIC,KACZC,EAAKC,OAAOH,EAAMI,WAAWC,SAAS,EAAG,KACzCC,EAAKH,OAAOH,EAAMO,WAAa,GAAGF,SAAS,EAAG,KAC9CG,EAAOR,EAAMS,cACbC,EAAOV,EAAMW,WAAa,IAAMX,EAAMY,aAAe,IAAMZ,EAAMa,aACrEb,EAAWM,GAAAA,OAAAA,EAAMJ,KAAAA,OAAAA,EAAMM,KAAAA,OAAAA,GACvBX,SAASC,cAAc,wBAAwBC,UAA4BC,gBAAAA,OAAAA,EAAWU,OAAAA,OAAAA,GACtFb,SAASC,cAAc,mBAAmBgB,UAAY","file":"index.js","sourceRoot":"../src","sourcesContent":["'use strict';\nimport './index.scss';\n(function(){\n    fetch('https://us-central1-detroit-iet.cloudfunctions.net/getToken')\n    .then((resp) => resp.json()) // Transform the data into json\n    .then(function(token) {\n        let url = `https://services2.arcgis.com/qvkbeam7Wirps6zC/arcgis/rest/services/Health_Data/FeatureServer/0/query?where=1%3D1&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=*&returnHiddenFields=false&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token=${token.access_token}`;\n        fetch(url)\n        .then((resp) => resp.json()) // Transform the data into json\n        .then(function(data) {\n            let detected = 0;\n            let quarantined = 0;\n            let recovered = 0;\n            let deaths = 0;\n            if(data.features.length){\n                data.features.forEach(element => {\n                    switch (true) {\n                        case element.attributes.Quarantine == '1':\n                            detected++;\n                            quarantined++;\n                            break;\n\n                        case element.attributes.Recovery == '1':\n                            detected++;\n                            recovered++;\n                            break;\n\n                            case element.attributes.Death == '1':\n                            detected++;\n                            recovered++;\n                            break;\n                    \n                        default:\n                            break;\n                    }\n                });\n            }\n            document.querySelector('.data-block.detected span').innerHTML = detected;\n            document.querySelector('.data-block.quarantined span').innerHTML = quarantined;\n            document.querySelector('.data-block.recovered span').innerHTML = recovered;\n            document.querySelector('.data-block.deaths span').innerHTML = deaths;\n            let today = new Date();\n            let dd = String(today.getDate()).padStart(2, '0');\n            let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n            let yyyy = today.getFullYear();\n            let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n            today = `${mm}/${dd}/${yyyy}`;\n            document.querySelector('.dashboard .update i').innerHTML = `Last updated ${today} - ${time}`;\n            document.querySelector('#loader-overlay').className = '';\n        });\n    });    \n})(window);"]}